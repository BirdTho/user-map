{"version":3,"sources":["model/UserApi.ts","components/List/List.component.tsx","components/Card/Card.component.tsx","components/Card/UserCard.container.tsx","components/List/UserList.container.tsx","components/Map/Map.tsx","components/MainView/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axiosInstance","Axios","create","baseURL","timeout","this","get","data","List","getListItems","props","listKeyFn","onClick","ListElement","map","item","index","key","listRef","rest","ref","React","PureComponent","children","UserCard","id","geo","address","lat","parseFloat","lng","name","phone","email","website","className","data-index","colSpan","street","suite","city","zipcode","href","target","rel","UserList","createRef","prevProps","listHighlight","ul","current","prevListHighlight","Array","from","find","li","getAttribute","toString","classList","remove","scrollIntoView","behavior","block","add","Map","mapRef","onMapClicked","state","infoWindow","google","maps","InfoWindow","markers","addListener","zoom","mapTypeId","MapTypeId","TERRAIN","mapTypeControl","center","LatLng","setState","users","sumLat","sumLng","length","forEach","geometry","marker","Marker","position","title","setContent","open","setCenter","setMarkers","setZoom","panTo","getTitle","Component","MainView","onListClick","mapHighlight","listClicked","userData","userApi","getUsers","App","Boolean","window","location","hostname","match","setupIntervalHandle","setInterval","clearInterval","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.365a2940.chunk.js","sourcesContent":["import Axios, { AxiosInstance, AxiosResponse } from 'axios';\n\nconst baseURL = 'https://jsonplaceholder.typicode.com/';\n\nconst axiosInstance = Axios.create({ baseURL, timeout: 5000 });\n\nexport interface UserData {\n  id: number,\n  name: string,\n  username: string,\n  email: string,\n  address: {\n    street: string,\n    suite: string,\n    city: string,\n    zipcode: string,\n    geo: {\n      lat: string,\n      lng: string,\n    },\n  },\n  phone: string,\n  website: string,\n  company: {\n    name: string,\n    catchPhrase: string,\n    bs: string,\n  },\n}\n\nclass UserApi {\n  axiosInstance: AxiosInstance;\n  constructor(axiosInstance: AxiosInstance) {\n    this.axiosInstance = axiosInstance;\n  }\n\n  async getUsers(): Promise<UserData[]> {\n    return (await this.axiosInstance.get('users')).data as UserData[];\n  }\n}\n\nexport default new UserApi(axiosInstance);","import React from \"react\";\n\ninterface ListProps<T, U> {\n  data: T[],\n  listRef: any,\n  ListElement: any | U,\n  listKeyFn?: (item: T, index?: number) => string,\n  onClick: (data: any) => void,\n  [key: string]: any,\n}\n\nexport default class List<T, U> extends React.PureComponent<ListProps<T, U>> {\n  getListItems = (): any => {\n    const {\n      data,\n      listKeyFn,\n      onClick,\n      ListElement,\n    } = this.props;\n\n    return data.map((item: T, index: number) => {\n      const key = listKeyFn ? listKeyFn(item, index) : index;\n      return <ListElement key={key} data={item} onClick={onClick}/>;\n    })\n  };\n\n  render() {\n    const {\n      data,\n      listRef,\n      ListElement,\n      onClick, // Needed to prevent <ul> from receiving onClick handler\n      ...rest\n    } = this.props;\n    return (\n      <ul {...rest} ref={listRef}>\n        {this.getListItems()}\n      </ul>\n    )\n  }\n}","import React from \"react\";\n\ninterface CardProps {\n  children: any,\n  className: string,\n  onClick: () => void\n}\n\nexport default function ({children, ...rest}: CardProps & JSX.IntrinsicAttributes) {\n  return (\n    <li {...rest}>\n      {children}\n    </li>\n  );\n}","import React from \"react\";\n\nimport Card from './Card.component';\nimport {UserData} from \"../../model/UserApi\";\n\nimport './UserCard.scss';\n\ninterface UserCardProps {\n  data: UserData,\n  onClick: (data: any) => void,\n}\n\nexport default class UserCard extends React.PureComponent<UserCardProps> {\n  onClick = () => {\n    const {\n      id,\n      address: {\n        geo,\n      },\n    } = this.props.data;\n    this.props.onClick({\n      geo: {\n        lat: parseFloat(geo.lat),\n        lng: parseFloat(geo.lng),\n      },\n      id,\n    });\n  };\n\n  render () {\n    const {\n      data: {\n        name, id,\n        address,\n        phone, email, website\n      },\n    } = this.props;\n\n    return (\n      <Card className={'user-card'} onClick={this.onClick} data-index={id}>\n        <table>\n          <tbody>\n          <tr><td colSpan={2}>{name}</td></tr>\n          <tr><td>Phone:</td><td>{phone}</td></tr>\n          <tr><td>Email:</td><td>{email}</td></tr>\n          <tr><td>Address:</td>\n            <td>{address.street} {address.suite}<br/>{address.city} {address.zipcode}</td></tr>\n          <tr><td>Website:</td>\n            <td><a href={'http://' + website} target='_blank' rel='noopener noreferrer'>{website}</a></td></tr>\n          </tbody>\n        </table>\n      </Card>\n    )\n  }\n}","import React from \"react\";\nimport List from \"./List.component\";\nimport UserCard from \"../Card/UserCard.container\";\nimport {UserData} from \"../../model/UserApi\";\n\nimport './UserList.scss';\n\ninterface UserListProps {\n  data: UserData[],\n  onClick: (data: any) => void,\n  listHighlight: number | null,\n}\n\nexport default class UserList extends React.PureComponent<UserListProps> {\n  listRef: any;\n\n  constructor(props: UserListProps) {\n    super(props);\n\n    this.listRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps: Readonly<UserListProps>): void {\n    const {\n      listHighlight\n    } = this.props;\n    if (prevProps.listHighlight !== listHighlight) {\n      const ul = this.listRef.current as HTMLUListElement;\n      const prevListHighlight = prevProps.listHighlight;\n      if (prevListHighlight) {\n        const li = Array.from(ul.children).find(li => li.getAttribute('data-index') === prevListHighlight.toString()) as HTMLLIElement;\n        li.classList.remove('highlight');\n      }\n\n      if (listHighlight) {\n        const li = Array.from(ul.children).find(li => li.getAttribute('data-index') === listHighlight.toString()) as HTMLLIElement;\n        li.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n        });\n        li.classList.add('highlight');\n      }\n    }\n  }\n\n  render() {\n    const {\n      data,\n      onClick,\n    } = this.props;\n\n    return (\n      <List<UserData, UserCard> listRef={this.listRef} data={data} ListElement={UserCard} onClick={onClick} className={'user-list'}/>\n    );\n  }\n}","import React from \"react\";\nimport {UserData} from \"../../model/UserApi\";\n\nimport './Map.scss';\n\ninterface MapProps {\n  users: UserData[],\n  onMapClicked: (id: any) => void,\n  center: {geo: {lat: number, lng: number}, id: number} | null\n}\n\ninterface MarkerTable {\n  [key: number]: google.maps.Marker\n}\n\ninterface MapState {\n  map: google.maps.Map | null,\n  infoWindow: google.maps.InfoWindow,\n  markers: MarkerTable,\n}\n\nexport default class Map extends React.Component<MapProps, MapState>{\n  mapRef: any;\n\n  constructor(props: MapProps) {\n    super(props);\n\n    this.mapRef = React.createRef();\n\n    this.state = {\n      map: null,\n      infoWindow: new google.maps.InfoWindow(),\n      markers: {},\n    };\n  }\n\n  async componentDidMount(): Promise<any> {\n    const {\n      mapRef: {\n        current\n      },\n      state: {\n        infoWindow,\n      },\n      props: {\n        onMapClicked,\n      },\n    } = this;\n\n    infoWindow.addListener('closeclick', () => {\n      onMapClicked(null);\n    });\n\n    const map = new google.maps.Map(current, {\n      zoom: 4,\n      mapTypeId: google.maps.MapTypeId.TERRAIN,\n      mapTypeControl: false,\n      center: new google.maps.LatLng(0, 0)\n    });\n\n    this.setState({\n      map,\n    });\n  }\n\n  setMarkers() {\n    const {\n      state: {\n        map,\n        infoWindow,\n      },\n      props: {\n        users,\n        onMapClicked,\n      },\n    } = this;\n\n    let sumLat = 0;\n    let sumLng = 0;\n\n    if (map && users.length) {\n      let markers: MarkerTable = {};\n      users.forEach(({id, name, address}: UserData) => {\n        const geo = address.geo;\n        let lat = parseFloat(geo.lat) as number;\n        let lng = parseFloat(geo.lng) as number;\n\n        sumLat += lat;\n        sumLng += lng;\n\n        const geometry = new google.maps.LatLng({lat, lng});\n        const marker = new google.maps.Marker({\n          position: geometry,\n          map,\n          title: name,\n        });\n\n        marker.addListener('click', () => {\n          infoWindow.setContent(name);\n          infoWindow.open(marker.get('map'), marker);\n          onMapClicked(id);\n        });\n\n        markers[id] = marker;\n      });\n\n      map.setCenter(new google.maps.LatLng({\n        lat: sumLat / users.length,\n        lng: sumLng / users.length,\n      }));\n\n      this.setState({\n        markers,\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<MapProps>): void {\n    if (prevProps.users?.length < 1 && this.props.users?.length > 0) {\n      this.setMarkers();\n    }\n\n    if (this.props.center !== prevProps.center && this.props.center) {\n      const {\n        map,\n        markers,\n        infoWindow,\n      } = this.state;\n      const {\n        geo,\n        id,\n      } = this.props.center;\n\n      if (map) {\n        map.setZoom(8);\n        map.panTo(new google.maps.LatLng(geo));\n        if (markers) {\n          const marker = markers[id];\n          if (marker) {\n            infoWindow.setContent(marker.getTitle() || '');\n            infoWindow.open(map, marker);\n          }\n        }\n      }\n    }\n  }\n\n  onMapClicked = (data: any) => {\n    this.props.onMapClicked(data);\n  };\n\n  render () {\n    const {\n      mapRef\n    } = this;\n    return (\n      <div>\n        <div className={'user-map-root'} ref={mapRef}/>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport userApi, {UserData} from '../../model/UserApi';\nimport UserList from \"../List/UserList.container\";\nimport Map from \"../Map/Map\";\n\ninterface MainViewProps {}\n\ninterface MainViewState {\n  userData: UserData[],\n  listClicked: null | number,\n  mapHighlight: null | {geo: {lat: number, lng: number}, id: number}\n}\n\nexport default class MainView extends React.Component<MainViewProps, MainViewState> {\n  state: MainViewState;\n\n  constructor(props: MainViewProps) {\n    super(props);\n\n    this.state = {\n      userData: [],\n      listClicked: null,\n      mapHighlight: null,\n    };\n  }\n\n  async componentDidMount(): Promise<any> {\n    // Fetch user data\n    const userData = await userApi.getUsers();\n    this.setState({\n      userData,\n    })\n  }\n\n  onListClick = (data: any): void => {\n    this.setState({\n      mapHighlight: data,\n      listClicked: data.id,\n    })\n  };\n\n  onMapClicked = (data: any): void => {\n    this.setState({\n      listClicked: data,\n    })\n  };\n\n  render () {\n    const {\n      onListClick,\n      onMapClicked,\n      state: {\n        listClicked,\n        mapHighlight,\n        userData,\n      }\n    } = this;\n\n    return (\n      <div>\n        <UserList data={userData} onClick={onListClick} listHighlight={listClicked || null}/>\n        <Map users={userData} center={mapHighlight || null} onMapClicked={onMapClicked}/>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport MainView from './components/MainView/MainView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainView/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst setupReactApp = () => {\n  ReactDOM.render(<App/>, document.getElementById('root'));\n};\n\nlet setupIntervalHandle = setInterval(() => {\n  if (google?.maps.Map) {\n    clearInterval(setupIntervalHandle);\n    setupReactApp();\n  }\n}, 250);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}